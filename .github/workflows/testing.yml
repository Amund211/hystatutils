name: Python testing

on: [push, pull_request, workflow_dispatch]

jobs:
  test:
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows, macOS]
        python_version: ["3.10"]
    defaults:
      run:
        shell: bash  # For `source`
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    - name: OS specific setup (windows)
      if: runner.os == 'Windows'
      run: |
        echo 'ACTIVATE_PATH=venv/Scripts/activate' >> $GITHUB_ENV
        echo 'BINARY_EXTENSION=.exe' >> $GITHUB_ENV
        echo 'PATHSEP=;' >> $GITHUB_ENV
        echo 'DIRSEP=\\' >> $GITHUB_ENV
    - name: OS specific setup (linux/mac)
      if: runner.os != 'Windows'
      run: |
        echo 'ACTIVATE_PATH=venv/bin/activate' >> $GITHUB_ENV
        echo 'BINARY_EXTENSION=' >> $GITHUB_ENV
        echo 'PATHSEP=:' >> $GITHUB_ENV
        echo 'DIRSEP=/' >> $GITHUB_ENV

    - name: Select dependency files (linux)
      if: matrix.os == 'ubuntu'
      run: |
        echo 'REQUIREMENTS=requirements/linux.txt' >> $GITHUB_ENV
        echo 'DEV_REQUIREMENTS=requirements/linux-dev.txt' >> $GITHUB_ENV
    - name: Select dependency files (windows)
      if: matrix.os == 'windows'
      run: |
        echo 'REQUIREMENTS=requirements/windows.txt' >> $GITHUB_ENV
        echo 'DEV_REQUIREMENTS=requirements/windows-dev.txt' >> $GITHUB_ENV
    - name: Select dependency files (mac)
      if: matrix.os == 'macOS'
      run: |
        echo 'REQUIREMENTS=requirements/mac.txt' >> $GITHUB_ENV
        echo 'DEV_REQUIREMENTS=requirements/mac-dev.txt' >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        python -m ensurepip --upgrade
        python -m venv venv
        source ${{ env.ACTIVATE_PATH }}
        python -m pip install -r ${{ env.REQUIREMENTS }} -r ${{ env.DEV_REQUIREMENTS }} -e .

        VERSION_STRING="$(python -c 'from prism import VERSION_STRING; print(VERSION_STRING)')"
        echo "BINARY_NAME=prism-$VERSION_STRING-${{ matrix.os }}${{ env.BINARY_EXTENSION }}" >> $GITHUB_ENV

    - name: Run typechecking
      run: |
        source ${{ env.ACTIVATE_PATH }}
        mypy --strict .

    - name: Run tests
      run: |
        source ${{ env.ACTIVATE_PATH }}
        coverage run
        coverage report

    - name: Build single file binary with pyinstaller
      run: |
        source ${{ env.ACTIVATE_PATH }}
        python add_version_to_icon.py  # Create the icon file
        pyinstaller prism_overlay.py --noconfirm --onefile --icon=pyinstaller/who_with_version.ico --name prism_overlay --additional-hooks-dir=pyinstaller
        mv dist/prism_overlay${{ env.BINARY_EXTENSION }} "dist/${{ env.BINARY_NAME }}"

    - name: Upload built binary
      uses: actions/upload-artifact@v3
      with:
        name: prism-${{ matrix.os }}
        path: "dist/${{ env.BINARY_NAME }}"
        if-no-files-found: error
